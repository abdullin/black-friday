syntax = "proto3";
package protos;
option go_package = "go-lite/protos";


message AddLocationsReq {

  message Loc {
    string name = 1;
    //LocType type = 2;
    // added later
    // added later
    repeated Loc locs = 4;
  }


  repeated Loc locs = 1;

  uint64 parent = 2;
}

message AddLocationsResp {
  message Loc {
    string name = 1;
    //LocType type = 2;
    uint64 id = 3;
    uint64 parent = 4;

    repeated Loc locs = 5;
  }
  repeated Loc locs = 1;
}

message LocationAdded {
  uint64 id = 1;
  string name = 2;
  //LocType type = 3;

  // added later
  uint64 parent = 4;
}

message LocationMoved {
  uint64 id = 1;
  uint64 oldParent = 2;
  uint64 newParent = 3;

}


message AddProductsReq {
  repeated string skus = 1;
}


message AddProductsResp {
  repeated uint64 ids = 2;
}

message ProductAdded {
  uint64 id = 1;
  string sku = 2;
}

message UpdateInventoryReq {
  uint64 location = 1;
  uint64 product = 2;
  int64 OnHandChange = 3;
}


message UpdateInventoryResp {
  int64 OnHand = 1;
}

message InventoryUpdated{
  uint64 location = 1;
  uint64 product = 2;
  int64 OnHandChange = 3;
  int64 OnHand = 4;
}

message ListLocationsReq {
  uint64 location = 1;
}

message ListLocationsResp {
  message Loc {
    string name = 1;
    //LocType type = 2;
    uint64 id = 3;
    uint64 parent = 4;

    repeated Loc chidren = 5;
  }
  repeated Loc locs = 1;

}



message GetLocInventoryReq {
  uint64 location = 1;
}

// this counts nested locations
message GetLocInventoryResp {

  message Item {
    uint64 Product = 1;
    int64 OnHand = 2;
  }

  repeated Item items = 1;
}


service InventoryService {
  rpc AddLocations(AddLocationsReq) returns (AddLocationsResp);

  rpc AddProducts(AddProductsReq) returns (AddProductsResp);

  rpc ListLocations(ListLocationsReq) returns (ListLocationsResp);

  rpc UpdateInventory(UpdateInventoryReq) returns (UpdateInventoryResp);
  rpc GetLocInventory(GetLocInventoryReq) returns (GetLocInventoryResp);
}